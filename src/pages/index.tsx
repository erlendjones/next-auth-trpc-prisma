import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useCallback, useState } from "react";
import { signIn, useSession } from "next-auth/react";
import { useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

import { loginSchema, ILogin } from "../common/validation/auth";
import { TRPCClientError } from "@trpc/client";
import ErrorMessage from "../components/messages/error";
import { useRouter } from "next/router";
import CredentialsError from "../components/messages/credentialsError";

const Home: NextPage = () => {
  const router = useRouter();
  const { handleSubmit, control, reset } = useForm<ILogin>({
    defaultValues: {
      email: "",
    },
    resolver: zodResolver(loginSchema),
  });

  const onSubmit = useCallback(async (data: ILogin) => {
    try {
      const type = "email" || "credentials";
      await signIn(type, { ...data, callbackUrl: "/dashboard" });
    } catch (err) {
      console.error(err);
    }
  }, []);

  const errorMessage =
    router.query.error === "CredentialsSignin" ? "Invalid credentials" : "";

  const { data: session, status } = useSession();

  if (status === "authenticated") {
    router.push("/dashboard");
  }

  return (
    <div>
      <Head>
        <title>Next App - Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {errorMessage && (
          <CredentialsError
            message={errorMessage}
            onClick={() => {
              reset();
            }}
          />
        )}

        <form
          className="flex items-center justify-center h-screen w-full"
          onSubmit={handleSubmit(onSubmit)}
        >
          <div className="card w-96 bg-base-100 shadow-xl">
            <div className="card-body">
              <h2 className="card-title">Welcome to XLIT!</h2>
              <Controller
                name="email"
                control={control}
                render={({ field }) => (
                  <input
                    type="email"
                    placeholder="Type your email..."
                    className="input input-bordered w-full max-w-xs"
                    {...field}
                  />
                )}
              />

              {/* && (
                <Controller
                  name="password"
                  control={control}
                  render={({ field }) => (
                    <input
                      type="password"
                      placeholder="Type your password..."
                      className="input input-bordered w-full max-w-xs my-2"
                      {...field}
                    />
                  )}
                />
                  )*/}
              <div className="card-actions items-center justify-between">
                <Link href="/sign-up" className="link">
                  Go to sign up
                </Link>

                <button className="btn btn-secondary" type="submit">
                  Login
                </button>
              </div>
            </div>
          </div>
        </form>
      </main>
    </div>
  );
};

export default Home;
